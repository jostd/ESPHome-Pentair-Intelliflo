esphome:
  name: intelliflo
  friendly_name: Intelliflo
  platformio_options:
    upload_speed: 115200 # Example upload speed

esp32:
  # platform: ESP32
  board: m5stack-atom
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO
  logs:
    # Set the logging level for the light component to NONE.
    light: NONE

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_password

ota:
  - platform: esphome
    password: !secret intelliflo_ota_password

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "intelliflo"
    password: !secret intelliflo_hotspot_password

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/jostd/ESPHome-Pentair-Intelliflo-VS
      ref: main
    refresh: 0s

uart:
  tx_pin: GPIO19
  rx_pin: GPIO22
  baud_rate: 9600

number:
  - platform: template
    id: pump_rpm
    name: "Pump RPM"
    unit_of_measurement: "RPM"
    mode: BOX
    optimistic: true
    restore_value: True
    min_value: 450
    max_value: 3450
    step: 1
  
  #- platform: template
  #  id: pump_flow
  #  name: "Pump Flow"
  #  device_class: volume_flow_rate
  #  unit_of_measurement: "mÂ³/h"
  #  mode: BOX
  #  optimistic: true
  #  restore_value: True
  #  min_value: 4.0
  #  max_value: 20.0
  #  step: 0.1

interval:
  - interval: 10s
    then:
      - if: 
          condition: 
            - lambda: 'return id(pump_select).state == "RPM";'
          then:
            - lambda: !lambda |- 
                id(pentair).pumpToRemoteControl();
                id(pentair).commandRPM(id(pump_rpm).state);
                id(pentair).requestPumpStatus();
      #- if: 
      #    condition: 
      #      - lambda: 'return id(pump_select).state == "Flow";'
      #    then:
      #      - lambda: !lambda |- 
      #          id(pentair).pumpToRemoteControl();
      #          id(pentair).commandFlow(id(pump_flow).state * 10);
      #          id(pentair).requestPumpStatus();

sensor:
  - platform: pentair_intelliflo
    power:
      name: "Power"
      id: pump_power
    rpm:
      name: "RPM"
    #flow:
    #  name: "Flow"
    #pressure:
    #  name: "Pressure"
    #  unit_of_measurement: "bar"

  - platform: total_daily_energy
    #power: power
    power_id: pump_power
    name: 'Total Daily Energy'
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

binary_sensor:
  - platform: pentair_intelliflo
    running:
      name: "Running"

time:
  - platform: homeassistant
    id: homeassistant_time
#text_sensor:
#  - platform: pentair_intelliflo
#    program:
#      name: "Program"

button:
  - platform: template
    name: "Pentair test"
    entity_category: CONFIG
    on_press: 
      then: 
        - lambda: !lambda |- 
            id(pentair).pumpToRemoteControl();
            id(pentair).commandRPM(1000);

select:
  - platform: template
    id: pump_select
    name: "Pump mode"
    optimistic: True
    options: 
      - "off"
      - Local
      - RPM
    on_value:
      then:
        - if: 
            condition: 
              - lambda: 'return x == "RPM";'
            then:
              - lambda: !lambda |- 
                  id(pentair).pumpToRemoteControl();
                  id(pentair).commandRPM(id(pump_rpm).state);
                  id(pentair).run();
                  id(pentair).requestPumpStatus();
        - if: 
            condition: 
              - lambda: 'return x == "off";'
            then:
              - lambda: !lambda |- 
                  id(pentair).pumpToRemoteControl();
                  id(pentair).stop();
                  id(pentair).requestPumpStatus();

light:
  - platform: neopixelbus
    type: GRB
    pin: GPIO27
    num_leds: 1
    variant: sk6812
    name: "Atom RGB Light"
    id: atom_light
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - random:
          name: "Random"
          transition_length: 1s
          update_interval: 1s
      - lambda:
          name: "Breathing Effect"
          update_interval: 50ms # Controls the smoothness of the fade
          lambda: |-
            static int step = 0;
            const int step_limit = 100; 
            float brightness;

            // Calculate a sine wave to create a smooth brightness change
            brightness = (sin(step * M_PI / step_limit) + 1) / 2.2 + .05;

            // Set the color and brightness
            auto call = id(atom_light).turn_on();
            call.set_rgb(0.0, 1.0, 0.0); 
            call.set_brightness(brightness);
            call.perform();
            
            step = ++step % (step_limit * 2);

pentair_intelliflo:
  id: pentair