esphome:
  name: intelliflo
  friendly_name: Intelliflo
  platformio_options:
    upload_speed: 115200 # Example upload speed

esp32:
  # platform: ESP32
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_password

ota:
  - platform: esphome
    password: !secret intelliflo_ota_password

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "intelliflo"
    password: !secret intelliflo_hotspot_password

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/jostd/ESPHome-Pentair-Intelliflo
    refresh: 0s

uart:
  tx_pin: GPIO17
  rx_pin: GPIO18
  baud_rate: 9600

number:
  - platform: template
    id: pump_rpm
    name: "Pump RPM"
    unit_of_measurement: "RPM"
    mode: BOX
    optimistic: true
    restore_value: True
    min_value: 450
    max_value: 3450
    step: 1
  
  - platform: template
    id: pump_flow
    name: "Pump Flow"
    device_class: volume_flow_rate
    unit_of_measurement: "mÂ³/h"
    mode: BOX
    optimistic: true
    restore_value: True
    min_value: 4.0
    max_value: 20.0
    step: 0.1

interval:
  - interval: 10s
    then:
      - if: 
          condition: 
            - lambda: 'return id(pump_select).state == "RPM";'
          then:
            - lambda: !lambda |- 
                id(pentair).pumpToRemoteControl();
                id(pentair).commandRPM(id(pump_rpm).state);
                id(pentair).requestPumpStatus();
      - if: 
          condition: 
            - lambda: 'return id(pump_select).state == "Flow";'
          then:
            - lambda: !lambda |- 
                id(pentair).pumpToRemoteControl();
                id(pentair).commandFlow(id(pump_flow).state * 10);
                id(pentair).requestPumpStatus();

sensor:
  - platform: pentair_intelliflo
    power:
      name: "Power"
    rpm:
      name: "RPM"
    flow:
      name: "Flow"
    pressure:
      name: "Pressure"
      unit_of_measurement: "bar"

binary_sensor:
  - platform: pentair_intelliflo
    running:
      name: "Running"

text_sensor:
  - platform: pentair_intelliflo
    program:
      name: "Program"

button:
  - platform: template
    name: "Pentair test"
    entity_category: CONFIG
    on_press: 
      then: 
        - lambda: !lambda |- 
            id(pentair).pumpToRemoteControl();
            id(pentair).commandRPM(1000);

select:
  - platform: template
    id: pump_select
    name: "Pump mode"
    optimistic: True
    options: 
      - Local
      - RPM
    on_value:
      then:
        - if: 
            condition: 
              - lambda: 'return x == "RPM";'
            then:
              - lambda: !lambda |- 
                  id(pentair).pumpToRemoteControl();
                  id(pentair).commandRPM(id(pump_rpm).state);
                  id(pentair).requestPumpStatus();

pentair_intelliflo:
  id: pentair